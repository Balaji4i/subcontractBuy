package AppModule;

import AppModule.common.applicationAM;

import java.math.BigDecimal;

import java.sql.CallableStatement;

import java.sql.SQLException;
import java.sql.Types;

import oracle.adf.share.ADFContext;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import view.XxscContractHeadersVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Sep 23 17:30:58 IST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class applicationAMImpl extends ApplicationModuleImpl implements applicationAM {
    /**
     * This is the default constructor (do not remove).
     */
    public applicationAMImpl() {
    }

    /**
     * Container's getter for XxscPayApplHeadersVO1.
     * @return XxscPayApplHeadersVO1
     */
    public ViewObjectImpl getXxscPayApplHeadersVO1() {
        return (ViewObjectImpl)findViewObject("XxscPayApplHeadersVO1");
    }

    /**
     * Container's getter for XxscPayApplLinesVO2.
     * @return XxscPayApplLinesVO2
     */
    public ViewObjectImpl getXxscPayApplLinesVO2() {
        return (ViewObjectImpl)findViewObject("XxscPayApplLinesVO2");
    }

    /**
     * Container's getter for XxscContractLinesVO1.
     * @return XxscContractLinesVO1
     */
    public ViewObjectImpl getXxscContractLinesVO1() {
        return (ViewObjectImpl)findViewObject("XxscContractLinesVO1");
    }

    /**
     * Container's getter for PayApplLineHdrFkLink1.
     * @return PayApplLineHdrFkLink1
     */
    public ViewLinkImpl getPayApplLineHdrFkLink1() {
        return (ViewLinkImpl)findViewLink("PayApplLineHdrFkLink1");
    }

    public void createNewApplication() {
//        System.err.println("===" +
//                           ADFContext.getCurrent().getSessionScope().get("contHdrID"));
//        System.err.println("===" +
//                           ADFContext.getCurrent().getSessionScope().get("version"));
//        System.err.println("===" +
//                           ADFContext.getCurrent().getSessionScope().get("ordID"));
//        System.err.println("===" +
//                           ADFContext.getCurrent().getSessionScope().get("paymentID"));
//        System.err.println("===" +
//                           ADFContext.getCurrent().getSessionScope().get("paymentNum"));
        ViewObject appHrdVO = getXxscPayApplHeadersVO1();
        ViewObject appLineVO = getXxscPayApplLinesVO2();
        // App New Row
        Row appHrdRow = appHrdVO.createRow();
        appHrdRow.setAttribute("ContHeaderId",
                               ADFContext.getCurrent().getSessionScope().get("contHdrID"));
        appHrdRow.setAttribute("Version",
                               ADFContext.getCurrent().getSessionScope().get("version"));
        appHrdRow.setAttribute("OrgId",
                               ADFContext.getCurrent().getSessionScope().get("ordID"));
        appHrdRow.setAttribute("PaymentTermId",
                               ADFContext.getCurrent().getSessionScope().get("paymentID"));
        appHrdRow.setAttribute("PaymentTerm",
                               ADFContext.getCurrent().getSessionScope().get("paymentNum"));
        appHrdVO.insertRow(appHrdRow);
        appHrdVO.executeQuery();
//        System.err.println("App header id-->  " +
//                           appHrdRow.getAttribute("ApplHeaderId"));
        // Filter contract line
        ViewObject contractLinedVO = getXxscContractLinesVO1();
        ViewCriteria vc = contractLinedVO.createViewCriteria();
        ViewCriteriaRow vcRow = vc.createViewCriteriaRow();
//        System.err.println("--=LINE=--" +
//                           ADFContext.getCurrent().getSessionScope().get("contHdrID"));
        vcRow.setAttribute("ContHeaderId",
                           ADFContext.getCurrent().getSessionScope().get("contHdrID"));
        vcRow.setAttribute("Version",
                           ADFContext.getCurrent().getSessionScope().get("version"));
        vc.addRow(vcRow);
        contractLinedVO.applyViewCriteria(vc);
        contractLinedVO.executeQuery();
//        System.err.println("==COUNT==" +
//                           contractLinedVO.getEstimatedRowCount());
        // Insert application Line Row
        RowSetIterator rs = contractLinedVO.createRowSetIterator(null);
        while (rs.hasNext()) {
            Row contracrLineRow = rs.next();
            Object hid = contracrLineRow.getAttribute("ContHeaderId");
            Object lid = contracrLineRow.getAttribute("ContLineId");
            Object version = contracrLineRow.getAttribute("Version");
//            System.err.println("HID==" + hid + "LID===" + lid + "===" +
//                               version);

            // Filtering Application Line---check contract line=0 or not
            ViewCriteria appVO = getXxscPayApplLinesVO1().createViewCriteria();
            ViewCriteriaRow appVCR = appVO.createViewCriteriaRow();
            appVCR.setAttribute("ContLineId", lid);
            appVO.addRow(appVCR);
            getXxscPayApplLinesVO1().applyViewCriteria(appVO);
            getXxscPayApplLinesVO1().executeQuery();
//            System.err.println("Total applicationLine Count--" +
//                               getXxscPayApplLinesVO1().getEstimatedRowCount());
            double TotalRowAppCount =
                getXxscPayApplLinesVO1().getEstimatedRowCount();
            //Equal to 0
            if (getXxscPayApplLinesVO1().getEstimatedRowCount() == 0) {
                //insert application line
                Row appLineRow = appLineVO.createRow();
//                System.err.println("App header id-->  " +
//                                   appHrdRow.getAttribute("ApplHeaderId"));
                appLineRow.setAttribute("ContHeaderId", hid);
                appLineRow.setAttribute("ContLineId", lid);
                appLineRow.setAttribute("Version", version);
                appLineRow.setAttribute("ApplHeaderId",
                                        appHrdRow.getAttribute("ApplHeaderId"));
                appLineRow.setAttribute("OrgId",
                                        ADFContext.getCurrent().getSessionScope().get("ordID"));
                appLineVO.insertRow(appLineRow);
                appLineVO.executeQuery();
//                System.err.println("Application Line inserted");
            } else {
                double totalPer = 0;
                double totalQty = 0;
                double totalAmt = 0;

                getAppSearchPreviousROVO1().setNamedWhereClauseParam("BV_CONT_HRDID",
                                                                     hid);
                getAppSearchPreviousROVO1().setNamedWhereClauseParam("BV_VER",
                                                                     version);
                getAppSearchPreviousROVO1().setNamedWhereClauseParam("BV_CONT_LNEID",
                                                                     lid);
                getAppSearchPreviousROVO1().setNamedWhereClauseParam("APP_HRDID",
                                                                     appHrdRow.getAttribute("ApplHeaderId"));
                getAppSearchPreviousROVO1().executeQuery();
                //                        previousCalculationVO.getEstimatedRowCount();
//                System.err.println("Pre Qty, % Amt===COUNT==" +
//                                   getAppSearchPreviousROVO1().getEstimatedRowCount());
                if (getAppSearchPreviousROVO1().getEstimatedRowCount() == 0) {
                    totalPer = 0;
                    totalQty = 0;
                    totalAmt = 0;
                } else {
                    totalQty =
                            getAppSearchPreviousROVO1().first().getAttribute("ApplPrevQty") ==
                            null ? 0 :
                            Double.parseDouble(getAppSearchPreviousROVO1().first().getAttribute("ApplPrevQty").toString());
                    totalPer =
                            getAppSearchPreviousROVO1().first().getAttribute("ApplPrevPerc") ==
                            null ? 0 :
                            Double.parseDouble(getAppSearchPreviousROVO1().first().getAttribute("ApplPrevPerc").toString());
                    totalAmt =
                            getAppSearchPreviousROVO1().first().getAttribute("ApplPrevAmount") ==
                            null ? 0 :
                            Double.parseDouble(getAppSearchPreviousROVO1().first().getAttribute("ApplPrevAmount").toString());
//                    System.out.println("totalQty---" + totalQty +
//                                       "totalPer-----" + totalPer +
//                                       "totalAmt---" + totalAmt);
                }

                //                RowSetIterator appRS=getXxscPayApplLinesVO1().createRowSet(null);
                //                double curPer=0;
                //                double curQty=0;
                //                double curAmt=0;
                //                double totalPer=0;
                //                double totalQty=0;
                //                double totalAmt=0;
                //                long count=0;
                //                while(appRS.hasNext()){
                //                    Row appRow=appRS.next();
                //                    if(appRow.getAttribute("PrevAmount")==null){
                //                        curPer=appRow.getAttribute("CurrPerc")==null?0:Double.parseDouble(appRow.getAttribute("CurrPerc").toString());
                //                        curQty=appRow.getAttribute("CurrTotQty")==null?0:Double.parseDouble(appRow.getAttribute("CurrTotQty").toString());
                //                        curAmt=appRow.getAttribute("CurrAmount")==null?0:Double.parseDouble(appRow.getAttribute("CurrAmount").toString());
                //                    }else{
                //                        curPer=appRow.getAttribute("CurrPerc")==null?0:Double.parseDouble(appRow.getAttribute("CurrPerc").toString());
                //                        curQty=appRow.getAttribute("CurrTotQty")==null?0:Double.parseDouble(appRow.getAttribute("CurrTotQty").toString());
                //                        curAmt=appRow.getAttribute("CurrAmount")==null?0:Double.parseDouble(appRow.getAttribute("CurrAmount").toString());
                //                    }
                //                    System.err.println(curPer+"---"+curQty+"---"+curAmt);
                //                    totalPer+=curPer;
                //                    totalQty+=curQty;
                //                    totalAmt+=curAmt;
                //                    System.err.println(totalPer+"----"+totalQty+"----"+totalAmt);
                //                    count++;
                //                    if(TotalRowAppCount==count){
                //insert application line
                Row appLineRow = appLineVO.createRow();
//                System.err.println("App header id-->  " +
//                                   appHrdRow.getAttribute("ApplHeaderId"));
                appLineRow.setAttribute("ContHeaderId", hid);
                appLineRow.setAttribute("ContLineId", lid);
                appLineRow.setAttribute("Version", version);
                appLineRow.setAttribute("ApplHeaderId",
                                        appHrdRow.getAttribute("ApplHeaderId"));
                appLineRow.setAttribute("PrevPerc", new BigDecimal(totalPer));
                appLineRow.setAttribute("PrevTotQty",
                                        new BigDecimal(totalQty));
                appLineRow.setAttribute("PrevAmount",
                                        new BigDecimal(totalAmt));
                appLineRow.setAttribute("OrgId",
                                        ADFContext.getCurrent().getSessionScope().get("ordID"));
                appLineRow.setAttribute("CumPerc", new BigDecimal(totalPer));
                appLineRow.setAttribute("CumTotQty", new BigDecimal(totalQty));
                appLineRow.setAttribute("CumAmount", new BigDecimal(totalAmt));
                appLineVO.insertRow(appLineRow);
                appLineVO.executeQuery();
//                System.err.println("Application Line inserted");
                //                    }
                //                }
            }
        }
    }


    public void refreshApplication() {
//        System.err.println("==APP==PAGE 0==" +
//                           ADFContext.getCurrent().getSessionScope().get("page"));
        if ("add".equalsIgnoreCase((String)ADFContext.getCurrent().getSessionScope().get("addEditApp"))) {
            if ("applicationBuy".equalsIgnoreCase((String)ADFContext.getCurrent().getSessionScope().get("page")) ||
                "application".equalsIgnoreCase((String)ADFContext.getCurrent().getSessionScope().get("page"))) {
//                System.err.println("==Apps==PAGE ADD BUTTON==" +
//                                   ADFContext.getCurrent().getSessionScope().get("page"));
                ADFContext.getCurrent().getPageFlowScope().put("resultVal",
                                                               "NewButtonApplication");
            } else {
//                System.err.println("==Apps==PAGE ADD METHOD==" +
//                                   ADFContext.getCurrent().getSessionScope().get("page"));
                ADFContext.getCurrent().getPageFlowScope().put("resultVal",
                                                               "NewMethodApplication");
            }
        } else if ("edit".equalsIgnoreCase((String)ADFContext.getCurrent().getSessionScope().get("addEditApp"))) {
//            System.err.println("===Application Edit===");
            ADFContext.getCurrent().getPageFlowScope().put("resultVal",
                                                           "EditApplication");
        }

        /*
                  if(("certificationSell".equalsIgnoreCase((String)ADFContext.getCurrent().getSessionScope().get("page")))||
                                 ("sell".equalsIgnoreCase((String)ADFContext.getCurrent().getSessionScope().get("page")))){
                            System.err.println("==CERT==PAGE=="+ADFContext.getCurrent().getSessionScope().get("page"));
                              createNewApplication();
                              getXxscPayApplHeadersVO1().executeQuery();
                  }else{
                            System.err.println("==CERT==PAGE=="+ADFContext.getCurrent().getSessionScope().get("page"));
                            getXxscPayApplHeadersVO1().createRow();
                            getXxscPayApplHeadersVO1().executeQuery();
                          }
            }else if("edit".equalsIgnoreCase((String)ADFContext.getCurrent().getSessionScope().get("addEditApp"))){

            }
            */
        System.err.println("==Apps==PAGE END==" +
                           ADFContext.getCurrent().getSessionScope().get("page"));


    }


    /**
     * Container's getter for XxscPayApplLinesVO1.
     * @return XxscPayApplLinesVO1
     */
    public ViewObjectImpl getXxscPayApplLinesVO1() {
        return (ViewObjectImpl)findViewObject("XxscPayApplLinesVO1");
    }

    /**
     * Container's getter for PrevAdvAndRetCalcROVO1.
     * @return PrevAdvAndRetCalcROVO1
     */
    public ViewObjectImpl getPrevAdvAndRetCalcROVO1() {
        return (ViewObjectImpl)findViewObject("PrevAdvAndRetCalcROVO1");
    }


    /**
     * Container's getter for XxscContractHeadersVO1.
     * @return XxscContractHeadersVO1
     */
    public ViewObjectImpl getXxscContractHeadersVO1() {
        return (ViewObjectImpl)findViewObject("XxscContractHeadersVO1");
    }

    /**
     * Container's getter for XxscPayApplHeadersVO2.
     * @return XxscPayApplHeadersVO2
     */
    public ViewObjectImpl getXxscPayApplHeadersVO2() {
        return (ViewObjectImpl)findViewObject("XxscPayApplHeadersVO2");
    }

    /**
     * Container's getter for FunctionROVO1.
     * @return FunctionROVO1
     */
    public ViewObjectImpl getFunctionROVO1() {
        return (ViewObjectImpl)findViewObject("FunctionROVO1");
    }

    /**
     * Container's getter for AppSearchPreviousROVO1.
     * @return AppSearchPreviousROVO1
     */
    public ViewObjectImpl getAppSearchPreviousROVO1() {
        return (ViewObjectImpl)findViewObject("AppSearchPreviousROVO1");
    }

    /**
     * Container's getter for certificationcurAmountROVO1.
     * @return certificationcurAmountROVO1
     */
    public ViewObjectImpl getcertificationcurAmountROVO1() {
        return (ViewObjectImpl)findViewObject("certificationcurAmountROVO1");
    }

    /**
     * Container's getter for paymentDueDateROVO1.
     * @return paymentDueDateROVO1
     */
    public ViewObjectImpl getpaymentDueDateROVO1() {
        return (ViewObjectImpl)findViewObject("paymentDueDateROVO1");
    }

    /**
     * Container's getter for PreviousAppCal1.
     * @return PreviousAppCal1
     */
    public ViewObjectImpl getPreviousAppCal1() {
        return (ViewObjectImpl)findViewObject("PreviousAppCal1");
    }

    /**
     * Container's getter for XxscUserAccess1.
     * @return XxscUserAccess1
     */
    public ViewObjectImpl getXxscUserAccess1() {
        return (ViewObjectImpl)findViewObject("XxscUserAccess1");
    }

    /**
     * Container's getter for XxscHeadDetailROVO1.
     * @return XxscHeadDetailROVO1
     */
    public ViewObjectImpl getXxscHeadDetailROVO1() {
        return (ViewObjectImpl)findViewObject("XxscHeadDetailROVO1");
    }

    /**
     * Container's getter for PenaltyBackChargesROVO1.
     * @return PenaltyBackChargesROVO1
     */
    public ViewObjectImpl getPenaltyBackChargesROVO1() {
        return (ViewObjectImpl)findViewObject("PenaltyBackChargesROVO1");
    }

    /**
     * Container's getter for Ret_amount1.
     * @return Ret_amount1
     */
    public ViewObjectImpl getRet_amount1() {
        return (ViewObjectImpl)findViewObject("Ret_amount1");
    }

    /**
     * Container's getter for checkApplicationROVO1.
     * @return checkApplicationROVO1
     */
    public ViewObjectImpl getcheckApplicationROVO1() {
        return (ViewObjectImpl)findViewObject("checkApplicationROVO1");
    }

    /**
     * Container's getter for XxscPayApplOthChargesVO1.
     * @return XxscPayApplOthChargesVO1
     */
    public ViewObjectImpl getXxscPayApplOthChargesVO1() {
        return (ViewObjectImpl)findViewObject("XxscPayApplOthChargesVO1");
    }

    /**
     * Container's getter for appHdrAppChargeVL1.
     * @return appHdrAppChargeVL1
     */
    public ViewLinkImpl getappHdrAppChargeVL1() {
        return (ViewLinkImpl)findViewLink("appHdrAppChargeVL1");
    }

    /**
     * Container's getter for FinalAppCalcROVO1.
     * @return FinalAppCalcROVO1
     */
    public ViewObjectImpl getFinalAppCalcROVO1() {
        return (ViewObjectImpl)findViewObject("FinalAppCalcROVO1");
    }

    /**
     * Container's getter for checkPaymentType_ROVO1.
     * @return checkPaymentType_ROVO1
     */
    public ViewObjectImpl getcheckPaymentType_ROVO1() {
        return (ViewObjectImpl)findViewObject("checkPaymentType_ROVO1");
    }

    /**
     * Container's getter for XxscPayApplAdvanceDtlsVO1.
     * @return XxscPayApplAdvanceDtlsVO1
     */
    public ViewObjectImpl getXxscPayApplAdvanceDtlsVO1() {
        return (ViewObjectImpl)findViewObject("XxscPayApplAdvanceDtlsVO1");
    }

    /**
     * Container's getter for PayAdvanceVL1.
     * @return PayAdvanceVL1
     */
    public ViewLinkImpl getPayAdvanceVL1() {
        return (ViewLinkImpl)findViewLink("PayAdvanceVL1");
    }

    /**
     * Container's getter for XxscPayApplAdvRecDtlsVO1.
     * @return XxscPayApplAdvRecDtlsVO1
     */
    public ViewObjectImpl getXxscPayApplAdvRecDtlsVO1() {
        return (ViewObjectImpl)findViewObject("XxscPayApplAdvRecDtlsVO1");
    }

    /**
     * Container's getter for PayRecVL1.
     * @return PayRecVL1
     */
    public ViewLinkImpl getPayRecVL1() {
        return (ViewLinkImpl)findViewLink("PayRecVL1");
    }

    /**
     * Container's getter for Extra_Adv_ROVO1.
     * @return Extra_Adv_ROVO1
     */
    public ViewObjectImpl getExtra_Adv_ROVO1() {
        return (ViewObjectImpl)findViewObject("Extra_Adv_ROVO1");
    }

    /**
     * Container's getter for AdvPrevAmt_ROVO1.
     * @return AdvPrevAmt_ROVO1
     */
    public ViewObjectImpl getAdvPrevAmt_ROVO1() {
        return (ViewObjectImpl)findViewObject("AdvPrevAmt_ROVO1");
    }

    /**
     * Container's getter for getMailIdROVO1.
     * @return getMailIdROVO1
     */
    public ViewObjectImpl getgetMailIdROVO1() {
        return (ViewObjectImpl)findViewObject("getMailIdROVO1");
    }

    /**
     * Container's getter for PreAppOtherChargeROVO1.
     * @return PreAppOtherChargeROVO1
     */
    public ViewObjectImpl getPreAppOtherChargeROVO1() {
        return (ViewObjectImpl)findViewObject("PreAppOtherChargeROVO1");
    }

    /**
     * Container's getter for appHdrToPreAppOtherVL1.
     * @return appHdrToPreAppOtherVL1
     */
    public ViewLinkImpl getappHdrToPreAppOtherVL1() {
        return (ViewLinkImpl)findViewLink("appHdrToPreAppOtherVL1");
    }


    /**
     * Container's getter for GetOtherChargesAmountROVO1.
     * @return GetOtherChargesAmountROVO1
     */
    public ViewObjectImpl getGetOtherChargesAmountROVO1() {
        return (ViewObjectImpl)findViewObject("GetOtherChargesAmountROVO1");
    }

    /**
     * Container's getter for GetApplicationOtherChargesAmount1.
     * @return GetApplicationOtherChargesAmount1
     */
    public ViewObjectImpl getGetApplicationOtherChargesAmount1() {
        return (ViewObjectImpl)findViewObject("GetApplicationOtherChargesAmount1");
    }
    
    public String deletedbcall(String p_cid,String p_type,String P_username,String p_ip)
           {
               String result="";
            try {
               CallableStatement cs=this.getDBTransaction().createCallableStatement("{call delehistory_pkg.deletehistory_proc(?,?,?,?,?)}", 1);
               int cid=Integer.parseInt(p_cid);
                   cs.setInt(1,cid);
                   cs.setString(2,p_type);
                   cs.setString(3,P_username);
                   cs.setString(4,p_ip);
                   cs.registerOutParameter(5, Types.VARCHAR);
                   cs.execute();
                   result=cs.getString(5);
               } catch (SQLException e) {
               }
              
               return result;
           }
    
    public void createVersionCal(BigDecimal contHdrId,BigDecimal appHdrId) {
      //  String p_errorMessgae = null;
                String p_errorCode =null;
        try {
            String stmt1 = "begin xx_version_calcul(:p_CONT_HEADER_ID,:p_APPL_HEADER_ID); end;";
            CallableStatement cst = null;
            cst = this.getDBTransaction().createCallableStatement(stmt1, 0);
            cst.setObject("p_CONT_HEADER_ID", contHdrId);
            cst.setObject("p_APPL_HEADER_ID", appHdrId);
            cst.executeUpdate();
    //            if (cst.getObject("p_return_code")  != null) {
    //               // p_errorMessgae = cst.getObject("p_return_msg").toString();
    //                                p_errorCode = cst.getObject("p_return_code").toString();
    //            }
    //        } catch (SQLException e) {
    //            e.printStackTrace();
    //        }
                           } catch (SQLException e) {
               }
      //  return p_errorCode;
              
    }
    /*  */
    /**
         * Container's getter for XxscPayApplAdvRecDtlsVO2.
         * @return XxscPayApplAdvRecDtlsVO2
         */
        public ViewObjectImpl getXxscPayApplAdvRecDtlsVO2() {
            return (ViewObjectImpl)findViewObject("XxscPayApplAdvRecDtlsVO2");
        }

    /**
     * Container's getter for xxscProjectNumberReportVO1.
     * @return xxscProjectNumberReportVO1
     */
    public ViewObjectImpl getxxscProjectNumberReportVO1() {
        return (ViewObjectImpl)findViewObject("xxscProjectNumberReportVO1");
    }
}
